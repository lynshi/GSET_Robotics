/*
Room 409
Maze Code
*/

#define LINEFOLLOW
//#define COLOR
#define MAZENAV
//#define BALLFIND
//#define BALLCATCH

#define MAX 60
#define RATIO 2
#define FIRSTUS 18
#define TURNDIST 6

#define SINGLE_TURN_ANGLE_TO_ENCODER 4
#define DOUBLE_TURN_ANGLE_TO_ENCODER 2

int black, white, lightAvg, dir; //if dir == 1, back; dir == -1, fwd
int ball = 0; //ball found = 1, no ball yet = 0
int inMaze = 0; //0 if not in the maze, 1 if in the maze

task lineFollow();
task color();
task mazeNav();
void mazeTurn();
int turnCheck();
task ballFind();
task ballCatch();

void turnHeadTo(int degrees);

void singleWheelTurn(byte motor, int degrees);
//void pointTurn(byte motors, int degrees);

void driveUpToWall();

void switchDir();
void displayNum(int n);
void calibration();

task main(){
     //calibration(); //calibrates black and white for line following
     //Precedes(lineFollow,color);
     
     Precedes(mazeNav);
}

#ifdef LINEFOLLOW

task lineFollow(){ //follows line to get into maze
     while(turnCheck()){ //change to color sensor
          if(SENSOR_1 > lightAvg){
               OnFwd(OUT_C,dir*MAX - dir*MAX*RATIO*(SENSOR_1 - lightAvg)/(white - lightAvg));
               OnFwd(OUT_A,dir*MAX);
          }
          else if(SENSOR_1 <= lightAvg){
               OnFwd(OUT_A,dir*MAX - dir*MAX*RATIO*(SENSOR_1 - lightAvg)/(black - lightAvg));
               OnFwd(OUT_C,dir*MAX);
          }
     }
     
     OnFwd(OUT_AC,0);
     switchDir();
     switchDir();
     Precedes(mazeNav,ballFind);
}

#endif

#ifdef ENTERMAZE

task color(){

}

#endif

#ifdef MAZENAV

task mazeNav(){ //used to navigate the maze
     Precedes(ballCatch);
}

void turnHeadTo(int degrees)
{
    long delta = degrees - MotorRotationCount(OUT_B);
    if(delta > 0)
        RotateMotor(OUT_B, 80, delta);
    else
        RotateMotor(OUT_B, -80, delta);
}

void driveUpToWall()
{
     turnHeadTo(0);
     OnFwdSync(OUT_AC, 30, 0);
     while(SensorUS(S2));
     OnFwdSync(OUT_AC, 0, 0);
}

#endif

void singleWheelTurn(byte motor, int degrees)
{
     RotateMotor(motor, MAX, degrees*SINGLE_TURN_ANGLE_TO_ENCODER);
     Wait(100);
}

void mazeTurn(){
     OnFwdSync(OUT_AC,0,0);
     
     for(int i = 0; i < 2; i++){
          RotateMotor(OUT_B,30,-90 - 180*i);
          Wait(1000);
          if(turnCheck()){ //checks to make sure if turn is okay
               RotateMotor(OUT_B,30,90 + 180*i);
               Wait(1000);
               if(i == 0){ //turn right
                    RotateMotor(OUT_C,30,dir*360);
               }
               else if(i == 1){ //turn left
                    RotateMotor(OUT_A,30,dir*360);
               }
               return;
          }
     }
     
     switchDir();
}

int turnCheck(){ //if no need to turn return 1; otherwise return 0
    if(SensorUS(S2) > TURNDIST){
         return(1);
    }
    else{
         return(0);
    }
}

#ifdef BALLFIND

task ballFind(){ //detects the ball in a room
     while(1){
          //detect ball
          /*if(ball detected){
                 ball = 1;
                 break;
          }*/
     }
}

#endif


#ifdef BALLCATCH

task ballCatch(){ //moves to the ball in a room and captures it
     //find the ball
}

#endif

void switchDir(){ //flips the ultrasonic sensor to enable driving in reverse
     if(dir == -1){
          dir = 1;
          RotateMotor(OUT_B,30,-180);

     }
     else if(dir == 1){
          dir = -1;
          RotateMotor(OUT_B,30,180);
     }
}

void displayNum(int n){ //displays a number
     ClearScreen();
     TextOut(0,2,NumToStr(n));
     Wait(1500);
     ClearScreen();
}

void calibration(){ //calibrates light sensor and starts the robot
     dir = -1;
     SetSensorLight(S1,1);
     TextOut(0,2,"Set black");
     Wait(3000);
     black = SENSOR_1;
     displayNum(black);
     TextOut(0,2,"Set white");
     Wait(3000);
     white = SENSOR_1;
     displayNum(white);

     lightAvg = (black + white) / 2;
     displayNum(lightAvg);
     
     SetSensorUltrasonic(S2);

     TextOut(0,2,"3"); //Here we go
     Wait(1000);
     ClearScreen();
     TextOut(0,2,"2");
     Wait(1000);
     ClearScreen();
     TextOut(0,2,"1");
     Wait(1000);
     ClearScreen();
     TextOut(0,2,"GO!");
     Wait(1000);
     ClearScreen();
}
