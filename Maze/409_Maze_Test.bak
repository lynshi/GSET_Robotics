/*
Room 409
Maze Code
*/

#define MAX 60
#define RATIO 2.0
#define OBST 15
#define TURNDIST 13
#define BALLDIST 15

#define SINGLE_TURN_ANGLE_TO_ENCODER 4.8
#define DOUBLE_TURN_ANGLE_TO_ENCODER_LEFT 2.5
#define DOUBLE_TURN_ANGLE_TO_ENCODER_RIGHT 3.35

int black, white, lightAvg, IRdir, strength;
int dir = -1; //if dir == 1, back; dir == -1, fwd
int ball = 0; //ball found = 1, no ball yet = 0
int inMaze = 0; //0 if not in the maze, 1 if in the maze
int ballAngle; //stores turn angle made to get the ball
int obstDone = 0;
int mode = 1;

task lineFollow();
task color();
task mazeNav();
void mazeTurn();
int turnCheck();
int ballFind();
void ballCatch();
void HTEnhancedIRSeekerV2(const byte  port, int &dir, int &strength);

void turnHeadTo(int degrees);

void singleWheelTurn(byte motor, int degrees);
void doubleWheelTurn(int degrees);
//void pointTurn(byte motors, int degrees);

void driveUpToWall(int look=0);
void driveUpToNotWall(int look2=0);

void switchDir();
void displayNum(int n);
void calibration();

task main(){

     black = 19;
     white = 45;
     lightAvg = (black + white) / 2;
     SetSensorLight(S1,1);
     SetSensorUltrasonic(S2);
     SetSensorType(S3, SENSOR_TYPE_LOWSPEED); //color
     SetSensorType(S4, SENSOR_TYPE_LOWSPEED); //IR
     calibration(); //calibrates black and white for line following
     //Precedes(lineFollow); //color too
     //OnFwdSync(OUT_AC,dir*30,0);
     //Wait(1500);


     /*while(1){
     doubleWheelTurn(90);
     Wait(500);
     doubleWheelTurn(-90);
     Wait(500);
     } */
     mode = 1;
     Precedes(lineFollow, color);
}

task lineFollow(){ //follows line to get into maze
     while(mode == 1){ //change to color sensor
          if(SensorUS(S2) <= OBST && obstDone == 0){
               obstDone = 1;
               doubleWheelTurn(90);
               OnFwdSync(OUT_AC,MAX*dir,0);
               Wait(1400);
               doubleWheelTurn(-90);
               OnFwdSync(OUT_AC,MAX*dir,0);
               Wait(1700);
               doubleWheelTurn(-90);
               while(SENSOR_1 > lightAvg){
                   OnFwd(OUT_AC, MAX*dir/2);
               }
          }
          if(SENSOR_1 > lightAvg){
               OnFwd(OUT_C,dir*MAX - dir*MAX*RATIO*(SENSOR_1 - lightAvg)/(white - lightAvg));
               OnFwd(OUT_A,dir*MAX);
          }
          else if(SENSOR_1 <= lightAvg){
               OnFwd(OUT_A,dir*MAX - dir*MAX*RATIO*(SENSOR_1 - lightAvg)/(black - lightAvg));
               OnFwd(OUT_C,dir*MAX);
          }
     }

     OnFwd(OUT_AC,0);
     //PlayTone(440,250);
     Wait(1000);
     Precedes(mazeNav); //ballFind too
}

task color(){
    //Wait(1000);
    while(mode == 1){
         if (SensorHTColorNum(S3) == 2 || SensorHTColorNum(S3) == 3)
         {
             PlayTone(440,250);
             Wait(4000);
         }

         else if(SensorHTColorNum(S3) == 9)
         {
              mode = 2;
              /*mode = 0;
              Wait(500);
              if(SensorHTColorNum(S3) >= 7 && SensorHTColorNum(S3) <= 9){
                   mode = 2;
              }
              else{
                   mode = 1;
              }  */
         }
         //displayNum(SensorHTColorNum(
     }
}

task mazeNav(){ //used to navigate the maze
     driveUpToWall();
     doubleWheelTurn(-90); //left
     driveUpToWall(); //enter room 1
     doubleWheelTurn(90); //right
     if(ballFind()){
         //PlayTone(440,250);
         //Wait(100000000;
         while(SensorUS(S2) > 2*TURNDIST){
            OnFwdSync(OUT_AC,MAX*dir/2,0);
         }
         
         OnFwdSync(OUT_AC,0,0);
         ballCatch();
         //doubleWheelTurn(90);
         //driveUpToNotWall(-90);
         //singleWheelTurn(OUT_C, 90); // right
         // exit
         
         driveUpToWall();
         doubleWheelTurn(90); //left (dir == 1)
         driveUpToNotWall(90);
         doubleWheelTurn(-90); //right (dir == 1);
         OnFwdSync(OUT_AC,MAX*dir,0);
         Wait(5000);
         OnFwdSync(OUT_AC,0,0);
         
         Wait(100000);
     }
     doubleWheelTurn(90); //right, get out of Room 1
     driveUpToWall(); //enter Room 3
     doubleWheelTurn(-90); //left
     if(ballFind()){
          //go get the damn ball
          //PlayTone(440,250);
         //Wait(100000000;
          ballCatch();
          //doubleWheelTurn(-90);
          //driveUpToNotWall(90);
          //singleWheelTurn(OUT_A, 90);  // left
          // exit
          
          driveUpToWall();
          doubleWheelTurn(-90); //right (dir == 1)
          driveUpToNotWall(-90);
          doubleWheelTurn(90); //left (dir == 1);
          OnFwdSync(OUT_AC,MAX*dir,0);
          Wait(5000);
          OnFwdSync(OUT_AC,0,0);
          Wait(999999);
     }
     doubleWheelTurn(-90); //left
     driveUpToWall(-90); //gets out of Room 3 and finds center wall
     OnFwdSync(OUT_AC,dir*MAX,0);
     Wait(500);
     driveUpToNotWall(-90); //finds Room 2
     singleWheelTurn(OUT_C,90); //right
     OnFwdSync(OUT_AC,-30,0);
     Wait(1750);
     turnHeadTo(0);
     
     if(ballFind()){
      //get the ********* ball
          //PlayTone(440,250);
         //Wait(100000000;
      
      
          ballCatch();
          
          if(ballFind() > 5){ //ball is in far left corner
               ballCatch();
               driveUpToWall();
               doubleWheelTurn(90); //left (dir == 1);
               driveUpToNotWall(90);
               doubleWheelTurn(-90); //right (dir == 1)
               OnFwdSync(OUT_AC,MAX*dir,0);
               Wait(5000);
               OnFwdSync(OUT_AC,0,0);
               Wait(203940234);
          }
          else if(ballFind() < 5){
               driveUpToWall();
               doubleWheelTurn(-90); //right (dir == 1)
               driveUpToWall();
               doubleWheelTurn(90); //left (dir == 1);
               driveUpToWall();
               doubleWheelTurn(90); //left (dir == 1);
               driveUpToNotWall(90);
               doubleWheelTurn(-90); //right (dir == 1)
               OnFwdSync(OUT_AC,MAX*dir,0);
               Wait(5000);
               OnFwdSync(OUT_AC,0,0);
               Wait(203940234);
          }
          
          
          /*OnFwdSync(OUT_AC,100,0); // High tail it out of there
          Wait(1000);
          singleWheelTurn(OUT_C, 90);
          driveUpToNotWall(-90);
          singleWheelTurn(OUT_C, 90);
          Wait(80082);*/
     }
     driveUpToWall(); //go into Room 2
     doubleWheelTurn(180); //turn around
     if(ballFind()){
      //get the ball already
          //PlayTone(440,250);
         //Wait(100000000;
      
          ballCatch();
          switchDir();
          doubleWheelTurn(90); //right
          driveUpToWall();
          doubleWheelTurn(-90); //left
          driveUpToWall();
          doubleWheelTurn(-90); //left
          driveUpToNotWall(-90);
          doubleWheelTurn(90); //right
          OnFwdSync(OUT_AC,MAX*dir,0);
          Wait(5000);
          OnFwdSync(OUT_AC,0,0);
          Wait(203940234);
          
          /*doubleWheelTurn(90); // right
          driveUpToWall();
          doubleWheelTurn(-90); // left
          driveUpToNotWall(-90);
          singleWheelTurn(OUT_C, 90);
          // exit */
          Wait(42424242);
     }
     
     /*
     doubleWheelTurn(90); //right
     if(ballFind()){
      //where the hell is it
      
     }
     */
     
     //Precedes(ballCatch);
}

void turnHeadTo(int degrees)
{
    long delta = degrees - MotorRotationCount(OUT_B);
    RotateMotor(OUT_B, 60, delta);
}

void driveUpToNotWall(int look2=0){
     turnHeadTo(look2);
     OnFwdSync(OUT_AC, dir*MAX, 0);
     while(!turnCheck());
     OnFwdSync(OUT_AC, 0, 0);
}

void driveUpToWall(int look=0)
{
     if(dir == -1 && look == 0){
          turnHeadTo(look);
     }
     else if(dir == 1 && look == 0){
          turnHeadTo(180);
     }
     else{
          turnHeadTo(look);
     }
     
     OnFwdSync(OUT_AC, dir*MAX, 0);
     while(turnCheck());
     OnFwdSync(OUT_AC, 0, 0);
}

void doubleWheelTurn(int degrees){
     if(degrees > 0){
          RotateMotorEx(OUT_AC, dir*MAX*0.5, DOUBLE_TURN_ANGLE_TO_ENCODER_RIGHT*degrees, -100, true, true);
     }
     else if(degrees <= 0){
          RotateMotorEx(OUT_AC, dir*MAX*0.5, DOUBLE_TURN_ANGLE_TO_ENCODER_LEFT*degrees, 100, true, true);
     }

     Wait(100);
}

void singleWheelTurn(byte motor, int degrees)
{
     RotateMotor(motor, MAX, dir*degrees*SINGLE_TURN_ANGLE_TO_ENCODER);
     Wait(100);
}

void mazeTurn(){
     OnFwdSync(OUT_AC,0,0);
     
     for(int i = 0; i < 2; i++){
          RotateMotor(OUT_B,30,-90 - 180*i);
          Wait(1000);
          if(turnCheck()){ //checks to make sure if turn is okay
               RotateMotor(OUT_B,30,90 + 180*i);
               Wait(1000);
               if(i == 0){ //turn right
                    RotateMotor(OUT_C,30,dir*360);
               }
               else if(i == 1){ //turn left
                    RotateMotor(OUT_A,30,dir*360);
               }
               return;
          }
     }
     
     switchDir();
}

int turnCheck(){ //if no need to turn return 1; otherwise return 0
    if(SensorUS(S2) > TURNDIST){
         return 1;
    }
    else{
         return 0;
    }
}

int ballFind(){ //detects the ball in a room
     HTEnhancedIRSeekerV2(S4,IRdir,strength);
     if(strength > 65){
          return IRdir;
     }
     else{
          return 0;
     }
}

void HTEnhancedIRSeekerV2(const byte  port, int &dir, int &strength)
{
  int cResp;
  byte cmdBuf[] = {0x10, 0x43};  // Read DC signal strengths (skip the dir)
  byte respBuf[];                 // Response Buffer
  bool fSuccess;
  int i, iMax;
  long dcSigSum, dcStr;

  dir = 0;
  strength = 0;

  // Read DC mode
  cResp=6;
  fSuccess = I2CBytes(port, cmdBuf, cResp, respBuf);
  if (fSuccess) {
    // Find the max DC sig strength
    iMax = 0;
    for (i=1; i<5; i++) if (respBuf[i] > respBuf[iMax]) iMax = i;
    // Calc base DC direction value
    dir = iMax*2+1;
    // Set base dcStrength based on max signal and average
    dcSigSum = respBuf[iMax] + respBuf[5];
    // Check signal strength of neighboring sensor elements
    if ((iMax > 0) && (respBuf[iMax-1] > respBuf[iMax]/2)) {
        dir--;
        dcSigSum += respBuf[iMax-1];
    }
    if ((iMax < 4) && (respBuf[iMax+1] > respBuf[iMax]/2)) {
        dir++;
        dcSigSum += respBuf[iMax+1];
    }
    // Make DC strength compatible with AC strength. use: sqrt(dcSigSum*500)
    dcSigSum *= 500; dcStr = 1;
    repeat(10) dcStr = (dcSigSum/dcStr + dcStr) / 2;  // sqrt approx
    strength = dcStr;
    // Decide if using DC strength or should read and use AC strength
    if (strength <= 200) {
      // Use AC Dir
      dir = 0; strength = 0;
      cmdBuf[1] = 0x49; // Recycle rest of cmdBuf from the DC read operation
      cResp=6;
      fSuccess = I2CBytes(port, cmdBuf, cResp, respBuf);
      if (fSuccess) {
        dir = respBuf[0];
        // Sum the sensor elements to get strength
        if (dir > 0) for (i=1; i<=5; i++) strength += respBuf[i];
      }
    }
  }
}

/*void ballCatch(){
     PlayTone(440,250);
     while(SensorUS(S2) > BALLDIST){
          if(ballFind() > 5){ //turn right
               OnFwd(OUT_A,dir*MAX/2);
               OnFwd(OUT_C,0);
          }
          else if(ballFind() <= 5{ //turn left
               OnFwd(OUT_A,0);
               OnFwd(OUT_C,dir*MAX/2);
          }
     }
     
     OnFwdSync(OUT_AC,0,0);
     turnHeadTo(360); //not sure if does circle
     turnHeadTo(180);
     dir = 1;
     
}*/

void ballCatch(){ //moves to the ball in a room and captures it
     //get the ball
     //1 is right
     if(ballFind() < 5){
          for(int i = 0; i < 91; i += 5){
               doubleWheelTurn(5);
               if(ballFind() == 4){
                    ballAngle = i;
                    break;
               }
          }
     }
     else if(ballFind() > 5){
          for(int i = 0; i > -91; i -= 5){
               doubleWheelTurn(-5);
               if(ballFind() == 4){
                    ballAngle = i;
                    break;
               }
          }
     }

     /*while(SensorUS(S2) > BALLDIST){
          if(ballFind() > 5){ //turn right
               OnFwd(OUT_A,dir*MAX/2);
               OnFwd(OUT_C,dir*MAX/2-5);
          }
          else if(ballFind() <= 5){ //turn left
               OnFwd(OUT_A,dir*MAX/2-5);
               OnFwd(OUT_C,dir*MAX/2);
          }
     } */
     
     OnFwd(OUT_AC,dir*100);

     Wait(3000);
     
     turnHeadTo(360); //not sure if does circle
     
     
     turnHeadTo(180);
     //doubleWheelTurn(-ballAngle);
     dir = 1;
     PlayTone(440,250);
     Wait(1000000000000);
}


void switchDir(){ //flips the ultrasonic sensor to enable driving in reverse
     if(dir == -1){
          dir = 1;
          RotateMotor(OUT_B,30,-180);

     }
     else if(dir == 1){
          dir = -1;
          RotateMotor(OUT_B,30,180);
     }
}

void displayNum(int n){ //displays a number
     ClearScreen();
     TextOut(0,2,NumToStr(n));
     Wait(1500);
     ClearScreen();
}

void calibration(){ //calibrates light sensor and starts the robot
     TextOut(0,2,"Set black");
     Wait(3000);
     black = SENSOR_1;
     displayNum(black);
     TextOut(0,2,"Set white");
     Wait(3000);
     white = SENSOR_1;
     displayNum(white);

     lightAvg = (black + white) / 2;
     displayNum(lightAvg);

     TextOut(0,2,"3"); //Here we go
     Wait(1000);
     ClearScreen();
     TextOut(0,2,"2");
     Wait(1000);
     ClearScreen();
     TextOut(0,2,"1");
     Wait(1000);
     ClearScreen();
     TextOut(0,2,"GO!");
     Wait(1000);
     ClearScreen();
}
